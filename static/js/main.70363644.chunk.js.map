{"version":3,"sources":["Loader.js","Weather.js","App.js","index.js"],"names":["Loader","active","msg","id","className","APP_Key","getCurrentPosition","options","Promise","resolve","reject","navigator","geolocation","Weather","props","getWeather","a","async","coords","axios","get","latitude","longitude","data","setState","isLoading","weather","locationName","name","main","errorMsg","code","console","log","isGeoError","state","wind","this","value","background","temp","description","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"oXAiBeA,MAdf,YAAgC,IAAfC,EAAc,EAAdA,OAAQC,EAAM,EAANA,IACrB,OACI,yBAAKC,GAAG,sBAAsBC,UAAWH,GACrC,wBAAIG,UAAU,eAAd,cACA,yBAAKA,UAAU,oCACX,yBAAKA,UAAU,UACX,8BAAM,kCAGd,2BAAIF,KCPVG,EAAU,mCAEVC,EAAqB,WAAmB,IAAlBC,EAAiB,uDAAP,GAClC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,UAAUC,YAAYN,mBAAmBG,EAASC,EAAQH,OAkFjDM,E,YA5EX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAYVC,WAAa,kCAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAEkBV,KAFlB,uBAEEY,EAFF,EAEEA,OAFF,WAAAF,EAAA,MAGgBG,IAAMC,IAAN,8DAAiEF,EAAOG,SAAxE,gBAAwFH,EAAOI,UAA/F,kBAAkHjB,EAAlH,2BAHhB,gBAGEkB,EAHF,EAGEA,KACP,EAAKC,SAAS,CACVC,WAAW,EACXC,QAASH,EAAKG,QAAQ,GACtBC,aAAcJ,EAAKK,KACnBC,KAAMN,EAAKM,OARV,kDAWDC,EAAW,GAXV,KAYG,KAAMC,KAZT,OAaI,IAbJ,QAgBI,IAhBJ,gCAcGD,EAAW,qFAdd,oCAiBGA,EAAW,oEAjBd,oCAoBGE,QAAQC,IAAI,KAAMF,MAClBD,EAAW,6BArBd,6BAwBL,EAAKN,SAAS,CAACC,WAAW,EAAOS,YAAY,EAAMJ,aAxB9C,0DAVT,EAAKK,MAAQ,CACTV,WAAW,EACXS,YAAY,EACZR,QAAS,GACTG,KAAM,GACNO,KAAM,GACNT,aAAc,IATH,E,iFA0CfU,KAAKtB,e,+BAGC,IAAD,EACwDsB,KAAKF,MAA3DV,EADF,EACEA,UAAWS,EADb,EACaA,WAAYR,EADzB,EACyBA,QAASG,EADlC,EACkCA,KAAMF,EADxC,EACwCA,aAE7C,OAAGF,EACQ,kBAAC,EAAD,CAAQxB,OAAO,KAAKC,IAAI,6HAC1BgC,EAED,kBAAC,WAAD,KACI,kBAAC,EAAD,CAAQjC,OAAO,MAAMC,IAAI,oBACzB,uBAAGE,UAAU,YAAYiC,KAAKF,MAAML,WAKxC,kBAAC,WAAD,KACI,kBAAC,EAAD,CAAQ7B,OAAO,MAAMC,IAAI,+BACzB,yBAAKE,UAAU,gBAAgBkC,MAAOZ,EAAQG,OAC9C,yBAAKzB,UAAU,aAAamC,WAAYb,EAAQG,OAChD,yBAAKzB,UAAU,kBAAkBmC,WAAYb,EAAQG,OACrD,yBAAK1B,GAAG,gBACJ,uBAAGC,UAAU,QAAQyB,EAAKW,KAA1B,QACA,yBAAKpC,UAAU,cACf,uBAAGA,UAAU,QAAQsB,EAAQe,YAA7B,IAA2Cf,EAAQG,KAAnD,KACA,uBAAGzB,UAAU,YAAYuB,S,GAtE3Be,IAAMC,WCDbC,MARf,WACE,OACE,yBAAKxC,UAAU,OACb,kBAAC,EAAD,QCFNyC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.70363644.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Loader.css';\r\n\r\nfunction Loader({active, msg}) {\r\n    return(\r\n        <div id=\"fixed_loading_panel\" className={active}>\r\n            <h2 className=\"loading_msg\">Loading...</h2>\r\n            <div className=\"loftloader-wrapper loader-square\">\r\n                <div className=\"loader\">\r\n                    <span><span></span></span>\r\n                </div>\r\n            </div>\r\n            <p>{msg}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Loader;","import React, { Fragment } from 'react';\r\nimport axios from 'axios';\r\nimport './Weather.css';\r\nimport Loader from './Loader';\r\n    \r\nconst APP_Key = \"53ff36a516736f2588021c40dc49e1e8\";\r\n\r\nconst getCurrentPosition = (options = {}) => {\r\n    return new Promise((resolve, reject) => {\r\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\r\n    });\r\n  };\r\n\r\nclass Weather extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isLoading: true,\r\n            isGeoError: false,\r\n            weather: {},\r\n            main: {},\r\n            wind: {},\r\n            locationName: \"\"\r\n        }\r\n    }\r\n\r\n    getWeather = async () => {\r\n        try {\r\n            const {coords} = await getCurrentPosition();\r\n            const {data} = await axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${coords.latitude}&lon=${coords.longitude}&APPID=${APP_Key}&lang=kr&units=metric`);\r\n            this.setState({\r\n                isLoading: false,\r\n                weather: data.weather[0],\r\n                locationName: data.name,\r\n                main: data.main\r\n            });\r\n        } catch (error) {\r\n            let errorMsg = \"\";\r\n            switch (error.code) {\r\n                case 1:\r\n                    errorMsg = \"위치 정보 권한을 허락해주세요!\";\r\n                    break;\r\n                case 2:\r\n                    errorMsg = \"위치 확인이 불가능해요...\";\r\n                    break;\r\n                default:\r\n                    console.log(error.code);\r\n                    errorMsg = \"문제 발생!\";\r\n                    break;\r\n            }\r\n            this.setState({isLoading: false, isGeoError: true, errorMsg});\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getWeather();\r\n    }\r\n\r\n    render() {\r\n        const {isLoading, isGeoError, weather, main, locationName} = this.state;\r\n\r\n        if(isLoading) {\r\n            return(<Loader active=\"on\" msg=\"이 사이트는 사용자의 위치 정보를 사용합니다!\"></Loader>);\r\n        }else if(isGeoError) {\r\n            return (\r\n                <Fragment>\r\n                    <Loader active=\"off\" msg=\"에러..!\"></Loader>\r\n                    <p className=\"errorMsg\">{this.state.errorMsg}</p>\r\n                </Fragment>\r\n            )\r\n        }else {\r\n            return(\r\n                <Fragment>\r\n                    <Loader active=\"off\" msg=\"로딩 완료!\"></Loader>\r\n                    <div className=\"weather_bg_ef\" value={weather.main}></div>\r\n                    <div className=\"weather_bg\" background={weather.main}></div>\r\n                    <div className=\"weather_bg last\" background={weather.main}></div>\r\n                    <div id=\"weather_card\">\r\n                        <p className=\"temp\">{main.temp}°</p>\r\n                        <div className=\"card_line\"></div>\r\n                        <p className=\"main\">{weather.description}({weather.main})</p>\r\n                        <p className=\"location\">{locationName}</p>\r\n                    </div>\r\n                </Fragment>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport './App.css';\r\nimport Weather from './Weather';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Weather></Weather>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}